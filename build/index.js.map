{"version":3,"file":"index.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/@scure/base/lib/esm/index.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../node_modules/near-sdk-js/lib/collections/lookup-map.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/collections/unordered-map.js","../node_modules/near-sdk-js/lib/promise.js","../node_modules/decimal.js/decimal.mjs","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\nexport function u8ArrayToBytes(array) {\n    return array.reduce((result, value) => `${result}${String.fromCharCode(value)}`, \"\");\n}\n// TODO this function is a bit broken and the type can't be string\n// TODO for more info: https://github.com/near/near-sdk-js/issues/78\nexport function bytesToU8Array(bytes) {\n    return Uint8Array.from([...bytes].map((byte) => byte.charCodeAt(0)));\n}\n/**\n * Accepts a string or Uint8Array and either checks for the validity of the string or converts the Uint8Array to Bytes.\n *\n * @param stringOrU8Array - The string or Uint8Array to be checked/transformed\n * @returns Safe Bytes to be used in NEAR calls.\n */\nexport function bytes(stringOrU8Array) {\n    if (typeof stringOrU8Array === \"string\") {\n        return checkStringIsBytes(stringOrU8Array);\n    }\n    if (stringOrU8Array instanceof Uint8Array) {\n        return u8ArrayToBytes(stringOrU8Array);\n    }\n    throw new Error(\"bytes: expected string or Uint8Array\");\n}\nfunction checkStringIsBytes(value) {\n    [...value].forEach((character, index) => {\n        assert(character.charCodeAt(0) <= 255, `string ${value} at index ${index}: ${character} is not a valid byte`);\n    });\n    return value;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    });\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(valueToDeserialize, (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nexport function assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexport const base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexport const bech32 = genBech32('bech32');\nexport const bech32m = genBech32('bech32m');\nexport const utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nexport const bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexport const str = bytesToString;\nexport const stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexport const bytes = stringToBytes;\n","import { bytes } from \"../utils\";\nimport { base58 } from \"@scure/base\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data.charCodeAt(0));\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data.charCodeAt(0));\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = bytes(base58.decode(keyData));\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(`${String.fromCharCode(curve)}${data}`);\n    }\n}\n","import { assert } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return env.read_register(0);\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageRead(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvicted() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWrite(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemove(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function input() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturn(value) {\n    env.value_return(value);\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageRead(\"STATE\");\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWrite(\"STATE\", this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value);\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","import * as near from \"../api\";\nimport { getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\n/**\n * A lookup map that stores data in NEAR storage.\n */\nexport class LookupMap {\n    /**\n     * @param keyPrefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(keyPrefix) {\n        this.keyPrefix = keyPrefix;\n    }\n    /**\n     * Checks whether the collection contains the value.\n     *\n     * @param key - The value for which to check the presence.\n     */\n    containsKey(key) {\n        const storageKey = this.keyPrefix + key;\n        return near.storageHasKey(storageKey);\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const storageKey = this.keyPrefix + key;\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const storageKey = this.keyPrefix + key;\n        if (!near.storageRemove(storageKey)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param newValue - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, newValue, options) {\n        const storageKey = this.keyPrefix + key;\n        const storageValue = serializeValueWithOptions(newValue, options);\n        if (!near.storageWrite(storageKey, storageValue)) {\n            return options?.defaultValue ?? null;\n        }\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     * @param options - Options for storing the data.\n     */\n    extend(keyValuePairs, options) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value, options);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        return new LookupMap(data.keyPrefix);\n    }\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, u8ArrayToBytes, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = u8ArrayToBytes(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageRead(storageKey);\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWrite(key, serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWrite(key, serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemove(lastKey), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWrite(key, serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvicted();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemove(key);\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import { assert, ERR_INCONSISTENT_STATE, getValueWithOptions, serializeValueWithOptions, } from \"../utils\";\nimport { Vector, VectorIterator } from \"./vector\";\nimport { LookupMap } from \"./lookup-map\";\n/**\n * An unordered map that stores data in NEAR storage.\n */\nexport class UnorderedMap {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     */\n    constructor(prefix) {\n        this.prefix = prefix;\n        this.keys = new Vector(`${prefix}u`); // intentional different prefix with old UnorderedMap\n        this.values = new LookupMap(`${prefix}m`);\n    }\n    /**\n     * The number of elements stored in the collection.\n     */\n    get length() {\n        return this.keys.length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.keys.isEmpty();\n    }\n    /**\n     * Get the data stored at the provided key.\n     *\n     * @param key - The key at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(key, options) {\n        const valueAndIndex = this.values.get(key);\n        if (valueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value] = valueAndIndex;\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Store a new value at the provided key.\n     *\n     * @param key - The key at which to store in the collection.\n     * @param value - The value to store in the collection.\n     * @param options - Options for retrieving and storing the data.\n     */\n    set(key, value, options) {\n        const valueAndIndex = this.values.get(key);\n        const serialized = serializeValueWithOptions(value, options);\n        if (valueAndIndex === null) {\n            const newElementIndex = this.length;\n            this.keys.push(key);\n            this.values.set(key, [serialized, newElementIndex]);\n            return null;\n        }\n        const [oldValue, oldIndex] = valueAndIndex;\n        this.values.set(key, [serialized, oldIndex]);\n        return getValueWithOptions(oldValue, options);\n    }\n    /**\n     * Removes and retrieves the element with the provided key.\n     *\n     * @param key - The key at which to remove data.\n     * @param options - Options for retrieving the data.\n     */\n    remove(key, options) {\n        const oldValueAndIndex = this.values.remove(key);\n        if (oldValueAndIndex === null) {\n            return options?.defaultValue ?? null;\n        }\n        const [value, index] = oldValueAndIndex;\n        assert(this.keys.swapRemove(index) !== null, ERR_INCONSISTENT_STATE);\n        // the last key is swapped to key[index], the corresponding [value, index] need update\n        if (!this.keys.isEmpty() && index !== this.keys.length) {\n            // if there is still elements and it was not the last element\n            const swappedKey = this.keys.get(index);\n            const swappedValueAndIndex = this.values.get(swappedKey);\n            assert(swappedValueAndIndex !== null, ERR_INCONSISTENT_STATE);\n            this.values.set(swappedKey, [swappedValueAndIndex[0], index]);\n        }\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (const key of this.keys) {\n            // Set instead of remove to avoid loading the value from storage.\n            this.values.set(key, null);\n        }\n        this.keys.clear();\n    }\n    [Symbol.iterator]() {\n        return new UnorderedMapIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new UnorderedMapIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Extends the current collection with the passed in array of key-value pairs.\n     *\n     * @param keyValuePairs - The key-value pairs to extend the collection with.\n     */\n    extend(keyValuePairs) {\n        for (const [key, value] of keyValuePairs) {\n            this.set(key, value);\n        }\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const map = new UnorderedMap(data.prefix);\n        // reconstruct keys Vector\n        map.keys = new Vector(`${data.prefix}u`);\n        map.keys.length = data.keys.length;\n        // reconstruct values LookupMap\n        map.values = new LookupMap(`${data.prefix}m`);\n        return map;\n    }\n}\n/**\n * An iterator for the UnorderedMap collection.\n */\nclass UnorderedMapIterator {\n    /**\n     * @param unorderedMap - The unordered map collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(unorderedMap, options) {\n        this.options = options;\n        this.keys = new VectorIterator(unorderedMap.keys);\n        this.map = unorderedMap.values;\n    }\n    next() {\n        const key = this.keys.next();\n        if (key.done) {\n            return { value: [key.value, null], done: key.done };\n        }\n        const valueAndIndex = this.map.get(key.value);\n        assert(valueAndIndex !== null, ERR_INCONSISTENT_STATE);\n        return {\n            done: key.done,\n            value: [key.value, getValueWithOptions(valueAndIndex[0], this.options)],\n        };\n    }\n}\n","import { assert } from \"./utils\";\nimport * as near from \"./api\";\n/**\n * A promise action which can be executed on the NEAR blockchain.\n */\nexport class PromiseAction {\n}\n/**\n * A create account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class CreateAccount extends PromiseAction {\n    add(promiseIndex) {\n        near.promiseBatchActionCreateAccount(promiseIndex);\n    }\n}\n/**\n * A deploy contract promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeployContract extends PromiseAction {\n    /**\n     * @param code - The code of the contract to be deployed.\n     */\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeployContract(promiseIndex, this.code);\n    }\n}\n/**\n * A function call promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCall extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    constructor(functionName, args, amount, gas) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCall(promiseIndex, this.functionName, this.args, this.amount, this.gas);\n    }\n}\n/**\n * A function call weight promise action.\n *\n * @extends {PromiseAction}\n */\nexport class FunctionCallWeight extends PromiseAction {\n    /**\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    constructor(functionName, args, amount, gas, weight) {\n        super();\n        this.functionName = functionName;\n        this.args = args;\n        this.amount = amount;\n        this.gas = gas;\n        this.weight = weight;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionFunctionCallWeight(promiseIndex, this.functionName, this.args, this.amount, this.gas, this.weight);\n    }\n}\n/**\n * A transfer promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Transfer extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    constructor(amount) {\n        super();\n        this.amount = amount;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionTransfer(promiseIndex, this.amount);\n    }\n}\n/**\n * A stake promise action.\n *\n * @extends {PromiseAction}\n */\nexport class Stake extends PromiseAction {\n    /**\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    constructor(amount, publicKey) {\n        super();\n        this.amount = amount;\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionStake(promiseIndex, this.amount, this.publicKey.data);\n    }\n}\n/**\n * A add full access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddFullAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFullAccess(promiseIndex, this.publicKey.data, this.nonce);\n    }\n}\n/**\n * A add access key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class AddAccessKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    constructor(publicKey, allowance, receiverId, functionNames, nonce) {\n        super();\n        this.publicKey = publicKey;\n        this.allowance = allowance;\n        this.receiverId = receiverId;\n        this.functionNames = functionNames;\n        this.nonce = nonce;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionAddKeyWithFunctionCall(promiseIndex, this.publicKey.data, this.nonce, this.allowance, this.receiverId, this.functionNames);\n    }\n}\n/**\n * A delete key promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteKey extends PromiseAction {\n    /**\n     * @param publicKey - The public key to delete from the account.\n     */\n    constructor(publicKey) {\n        super();\n        this.publicKey = publicKey;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteKey(promiseIndex, this.publicKey.data);\n    }\n}\n/**\n * A delete account promise action.\n *\n * @extends {PromiseAction}\n */\nexport class DeleteAccount extends PromiseAction {\n    /**\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    constructor(beneficiaryId) {\n        super();\n        this.beneficiaryId = beneficiaryId;\n    }\n    add(promiseIndex) {\n        near.promiseBatchActionDeleteAccount(promiseIndex, this.beneficiaryId);\n    }\n}\nclass PromiseSingle {\n    constructor(accountId, actions, after, promiseIndex) {\n        this.accountId = accountId;\n        this.actions = actions;\n        this.after = after;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const promiseIndex = this.after\n            ? near.promiseBatchThen(this.after.constructRecursively(), this.accountId)\n            : near.promiseBatchCreate(this.accountId);\n        this.actions.forEach((action) => action.add(promiseIndex));\n        this.promiseIndex = promiseIndex;\n        return promiseIndex;\n    }\n}\nexport class PromiseJoint {\n    constructor(promiseA, promiseB, promiseIndex) {\n        this.promiseA = promiseA;\n        this.promiseB = promiseB;\n        this.promiseIndex = promiseIndex;\n    }\n    constructRecursively() {\n        if (this.promiseIndex !== null) {\n            return this.promiseIndex;\n        }\n        const result = near.promiseAnd(this.promiseA.constructRecursively(), this.promiseB.constructRecursively());\n        this.promiseIndex = result;\n        return result;\n    }\n}\n/**\n * A high level class to construct and work with NEAR promises.\n */\nexport class NearPromise {\n    /**\n     * @param subtype - The subtype of the promise.\n     * @param shouldReturn - Whether the promise should return.\n     */\n    constructor(subtype, shouldReturn) {\n        this.subtype = subtype;\n        this.shouldReturn = shouldReturn;\n    }\n    /**\n     * Creates a new promise to the provided account ID.\n     *\n     * @param accountId - The account ID on which to call the promise.\n     */\n    static new(accountId) {\n        const subtype = new PromiseSingle(accountId, [], null, null);\n        return new NearPromise(subtype, false);\n    }\n    addAction(action) {\n        if (this.subtype instanceof PromiseJoint) {\n            throw new Error(\"Cannot add action to a joint promise.\");\n        }\n        this.subtype.actions.push(action);\n        return this;\n    }\n    /**\n     * Creates a create account promise action and adds it to the current promise.\n     */\n    createAccount() {\n        return this.addAction(new CreateAccount());\n    }\n    /**\n     * Creates a deploy contract promise action and adds it to the current promise.\n     *\n     * @param code - The code of the contract to be deployed.\n     */\n    deployContract(code) {\n        return this.addAction(new DeployContract(code));\n    }\n    /**\n     * Creates a function call promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     */\n    functionCall(functionName, args, amount, gas) {\n        return this.addAction(new FunctionCall(functionName, args, amount, gas));\n    }\n    /**\n     * Creates a function call weight promise action and adds it to the current promise.\n     *\n     * @param functionName - The name of the function to be called.\n     * @param args - The arguments to be passed to the function.\n     * @param amount - The amount of NEAR to attach to the call.\n     * @param gas - The amount of Gas to attach to the call.\n     * @param weight - The weight of unused Gas to use.\n     */\n    functionCallWeight(functionName, args, amount, gas, weight) {\n        return this.addAction(new FunctionCallWeight(functionName, args, amount, gas, weight));\n    }\n    /**\n     * Creates a transfer promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     */\n    transfer(amount) {\n        return this.addAction(new Transfer(amount));\n    }\n    /**\n     * Creates a stake promise action and adds it to the current promise.\n     *\n     * @param amount - The amount of NEAR to tranfer.\n     * @param publicKey - The public key to use for staking.\n     */\n    stake(amount, publicKey) {\n        return this.addAction(new Stake(amount, publicKey));\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     */\n    addFullAccessKey(publicKey) {\n        return this.addFullAccessKeyWithNonce(publicKey, 0n);\n    }\n    /**\n     * Creates a add full access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a full access key.\n     * @param nonce - The nonce to use.\n     */\n    addFullAccessKeyWithNonce(publicKey, nonce) {\n        return this.addAction(new AddFullAccessKey(publicKey, nonce));\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Uses 0n as the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     */\n    addAccessKey(publicKey, allowance, receiverId, functionNames) {\n        return this.addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, 0n);\n    }\n    /**\n     * Creates a add access key promise action and adds it to the current promise.\n     * Allows you to specify the nonce.\n     *\n     * @param publicKey - The public key to add as a access key.\n     * @param allowance - The allowance for the key in yoctoNEAR.\n     * @param receiverId - The account ID of the reciever.\n     * @param functionNames - The names of funcitons to authorize.\n     * @param nonce - The nonce to use.\n     */\n    addAccessKeyWithNonce(publicKey, allowance, receiverId, functionNames, nonce) {\n        return this.addAction(new AddAccessKey(publicKey, allowance, receiverId, functionNames, nonce));\n    }\n    /**\n     * Creates a delete key promise action and adds it to the current promise.\n     *\n     * @param publicKey - The public key to delete from the account.\n     */\n    deleteKey(publicKey) {\n        return this.addAction(new DeleteKey(publicKey));\n    }\n    /**\n     * Creates a delete account promise action and adds it to the current promise.\n     *\n     * @param beneficiaryId - The beneficiary of the account deletion - the account to recieve all of the remaining funds of the deleted account.\n     */\n    deleteAccount(beneficiaryId) {\n        return this.addAction(new DeleteAccount(beneficiaryId));\n    }\n    /**\n     * Joins the provided promise with the current promise, making the current promise a joint promise subtype.\n     *\n     * @param other - The promise to join with the current promise.\n     */\n    and(other) {\n        const subtype = new PromiseJoint(this, other, null);\n        return new NearPromise(subtype, false);\n    }\n    /**\n     * Adds a callback to the current promise.\n     *\n     * @param other - The promise to be executed as the promise.\n     */\n    then(other) {\n        assert(other.subtype instanceof PromiseSingle, \"Cannot callback joint promise.\");\n        assert(other.subtype.after === null, \"Cannot callback promise which is already scheduled after another\");\n        other.subtype.after = this;\n        return other;\n    }\n    /**\n     * Sets the shouldReturn field to true.\n     */\n    asReturn() {\n        this.shouldReturn = true;\n        return this;\n    }\n    /**\n     * Recursively goes through the current promise to get the promise index.\n     */\n    constructRecursively() {\n        const result = this.subtype.constructRecursively();\n        if (this.shouldReturn) {\n            near.promiseReturn(result);\n        }\n        return result;\n    }\n    /**\n     * Called by NearBindgen, when return object is a NearPromise instance.\n     */\n    onReturn() {\n        this.asReturn().constructRecursively();\n    }\n}\n","/*!\r\n *  decimal.js v10.4.2\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var halfPi,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.asin();\r\n  halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return halfPi.minus(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'lt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 'gt');\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n */\r\nfunction maxOrMin(Ctor, args, ltgt) {\r\n  var y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    } else if (x[ltgt](y)) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|Decimal} The y-coordinate.\r\n * x {number|string|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|Decimal}\r\n * min {number|string|Decimal}\r\n * max {number|string|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n\r\n      // Infinity, NaN.\r\n      } else if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n\r\n    } else if (t !== 'string') {\r\n      throw Error(invalidArgument + v);\r\n    }\r\n\r\n    // Minus sign?\r\n    if ((i = v.charCodeAt(0)) === 45) {\r\n      v = v.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      // Plus sign?\r\n      if (i === 43) v = v.slice(1);\r\n      x.s = 1;\r\n    }\r\n\r\n    return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|Decimal} The argument of the logarithm.\r\n * y {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, 'lt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 'gt');\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} The base.\r\n * y {number|string|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal}\r\n * y {number|string|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import { NearBindgen, near, call, view, LookupMap, NearPromise, UnorderedMap } from \"near-sdk-js\";\nimport Decimal from \"decimal.js\";\n\nconst WHITELISTED_ACCOUNTS = [\"asac.test.near\", \"nearnautnft.test.near\"]\n\n@NearBindgen({})\nclass NearTrustIndex {\n  accountIndexHistory: LookupMap<string>;\n  accountIndexHistoryTimestamp: LookupMap<string>;\n  accountIndexHistoryFailures: LookupMap<string>;\n  accountResult: UnorderedMap<bigint>;\n  testLogs: string[];\n\n  constructor() {\n    this.accountIndexHistory = new LookupMap(\"aih\");\n    this.accountIndexHistoryTimestamp = new LookupMap(\"aiht\");\n    this.accountIndexHistoryFailures = new LookupMap(\"aihf\");\n    this.accountResult = new UnorderedMap(\"ar\");\n    this.testLogs = [];\n  }\n\n  @view({})\n  get_temp_logs(): string[] {\n    return this.testLogs;\n  }\n\n  @call({ payableFunction: true })\n  calculate_index({ account_id }: { account_id: string }): NearPromise | void {\n    near.log(\"calculate_index\");\n    this.testLogs.push(\"calculate_index\");\n    // query whitelisted accounts for this account_id using NearPromise\n    // ----\n    const thirtyTgas = BigInt(\"30\" + \"0\".repeat(12));\n    let callCount = 0;\n    let thisContract = Object.keys(WHITELISTED_ACCOUNTS)[0];\n    near.log(\"thisContract: \" + thisContract);\n    this.testLogs.push(\"thisContract: \" + thisContract);\n    const promise = NearPromise.new(thisContract);\n    // iterate through WHITELIST[thisContract] values\n    for (let i = 0; i < 1; i++) { // only one function for now\n      const functionName = \"nft_supply_for_owner\";\n      near.log(\"functionName: \" + functionName);\n      this.testLogs.push(\"functionName: \" + functionName);\n      promise.functionCall(functionName, JSON.stringify({ account_id: account_id }), BigInt(0), thirtyTgas); // view method\n      callCount++;\n    }\n    // iterate through remaining WHITELIST keys\n    for (let i = 1; i < WHITELISTED_ACCOUNTS.length; i++) {\n      thisContract = WHITELISTED_ACCOUNTS[i];\n      near.log(\"thisContract: \" + thisContract);\n      this.testLogs.push(\"thisContract: \" + thisContract);\n      if (true) { // if contract has functions, in this case always 1\n        near.log(\"creating promise\");\n        this.testLogs.push(\"creating promise\");\n        let newPromise = NearPromise.new(thisContract);\n        // iterate through WHITELIST[thisContract] values\n        for (let i = 0; i < 1; i++) { // only one function for now\n          const functionName = \"nft_supply_for_owner\";\n          near.log(\"functionName: \" + functionName);\n          this.testLogs.push(\"functionName: \" + functionName);\n          newPromise.functionCall(functionName, JSON.stringify({ account_id: account_id }), BigInt(0), thirtyTgas); // view method\n          callCount++;\n        }\n        promise.then(newPromise);\n        near.log(\"promise pushed\");\n        this.testLogs.push(\"promise pushed\");\n      }\n    }\n    near.log(\"invoking callback\");\n    this.testLogs.push(\"invoking callback\");\n    // call internalCallback\n    promise.then(\n      NearPromise\n        .new(near.currentAccountId())\n        .functionCall(\"internalCallback\", JSON.stringify({ accountId: account_id, callCount: callCount }), BigInt(0), thirtyTgas)\n    );\n    // ----\n    return promise.asReturn();\n  } \n\n  @call({ privateFunction: true })\n  internalCallback({ accountId, callCount }: { accountId: string; callCount: number }): void {\n    near.log(\"internalCallback\");\n    this.testLogs.push(\"internalCallback\");\n    // loop through all call counts\n    this.accountIndexHistoryFailures.set(accountId, \"\");\n    let accountScores: number[] = [];\n    // TODO: review this when we have more than 1 function in WHITELIST account functions\n    for (let i = 0; i < callCount; i++) {\n      let accountFunctions = [\"nft_supply_for_owner\"];\n      for (let j = 0; j < accountFunctions.length; j++) {\n        let functionName = accountFunctions[j];\n        let mapKey = accountId + \":\" + functionName; // nested collections cumbersome: https://docs.near.org/develop/contracts/storage#map\n        this.testLogs.push(\"mapKey: \" + mapKey);\n        try {\n          const promiseResult = near.promiseResult(i);\n          try {\n            const promiseObject = JSON.parse(promiseResult);\n            this.accountResult.set(mapKey, promiseObject);\n            const score = 1;\n            accountScores.push(score);\n          } catch (error) {\n            const msg = \"Failed saving result from successful promise for id: \" + i + \" with error message: \" + error.message;\n            near.log(msg);\n            this.accountIndexHistoryFailures.set(mapKey, msg);\n          }\n        } catch (error) {\n          const msg = `Contract Function ${i} threw error`;\n          near.log(msg);\n          this.accountIndexHistoryFailures.set(mapKey, msg);\n        }\n      }\n    }\n    // we save the new scores for every account and timestamp every record\n    const timestamp = near.blockTimestamp().toString();\n    const accountIndex = new Decimal(\"1\").toFixed(2);\n    // we iterate through accountAverageScores\n    this.testLogs.push(\"accountIndex: \" + accountIndex);\n    this.accountIndexHistory.set(accountId, accountIndex);\n    this.accountIndexHistoryTimestamp.set(accountId, timestamp);\n  }\n\n}\n\n"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","u8ArrayToBytes","array","reduce","result","value","String","fromCharCode","assert","expression","message","Error","getValueWithOptions","options","deserializer","deserialize","deserialized","undefined","defaultValue","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","_","Object","keys","length","every","includes","BigInt","PromiseResult","PromiseError","assertNumber","n","Number","isSafeInteger","chain","args","wrap","a","b","c","encode","Array","from","reverse","acc","i","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","bytes","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","base16","base32","s","toUpperCase","replace","base64","base64url","genBase58","abc","base58","XMR_BLOCK_LEN","base58xmr","block","subarray","padStart","str","blockLen","j","concat","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","len","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","utf8","TextDecoder","TextEncoder","hex","CODERS","CurveType","DataLength","U64_MAX","EVICTED_REGISTER","log","params","env","accumulated","parameter","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","blockTimestamp","block_timestamp","attachedDeposit","attached_deposit","storageRead","returnValue","storage_read","storageHasKey","storage_has_key","storageGetEvicted","storageWrite","storage_write","storageRemove","storage_remove","promiseAnd","promiseIndexes","promise_and","promiseBatchCreate","accountId","promise_batch_create","promiseBatchThen","promiseIndex","promise_batch_then","promiseBatchActionCreateAccount","promise_batch_action_create_account","promiseBatchActionDeployContract","code","promise_batch_action_deploy_contract","promiseBatchActionFunctionCall","methodName","amount","gas","promise_batch_action_function_call","promiseBatchActionTransfer","promise_batch_action_transfer","promiseBatchActionStake","publicKey","promise_batch_action_stake","promiseBatchActionAddKeyWithFullAccess","nonce","promise_batch_action_add_key_with_full_access","promiseBatchActionAddKeyWithFunctionCall","allowance","receiverId","methodNames","promise_batch_action_add_key_with_function_call","promiseBatchActionDeleteKey","promise_batch_action_delete_key","promiseBatchActionDeleteAccount","beneficiaryId","promise_batch_action_delete_account","promiseBatchActionFunctionCallWeight","weight","promise_batch_action_function_call_weight","promiseResult","status","promise_result","Successful","Failed","NotReady","promiseReturn","promise_return","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","near","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","constructor","reconstruct","_requireInit","LookupMap","keyPrefix","containsKey","storageKey","get","remove","set","newValue","storageValue","extend","keyValuePairs","indexToKey","Uint32Array","buffer","Vector","isEmpty","swapRemove","pop","last","element","lastIndex","lastKey","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","vector","current","next","UnorderedMap","values","valueAndIndex","serialized","newElementIndex","oldValue","oldIndex","oldValueAndIndex","swappedKey","swappedValueAndIndex","UnorderedMapIterator","unorderedMap","PromiseAction","CreateAccount","add","DeployContract","FunctionCall","functionName","FunctionCallWeight","Transfer","Stake","AddFullAccessKey","AddAccessKey","functionNames","DeleteKey","DeleteAccount","PromiseSingle","actions","after","constructRecursively","action","PromiseJoint","promiseA","promiseB","NearPromise","subtype","shouldReturn","new","addAction","createAccount","deployContract","functionCall","functionCallWeight","transfer","stake","addFullAccessKey","addFullAccessKeyWithNonce","addAccessKey","addAccessKeyWithNonce","deleteKey","deleteAccount","and","other","then","asReturn","onReturn","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","precision","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","pow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","PI_PRECISION","P","toStringTag","absoluteValue","abs","x","finalise","ceil","clampedTo","clamp","min","max","k","Ctor","NaN","gt","cmp","comparedTo","y","xdL","ydL","xd","yd","xs","ys","cosine","cos","pr","rm","sd","toLessThanHalfPi","neg","cubeRoot","cbrt","m","r","rep","t","t3","t3plusx","isFinite","isZero","digitsToString","toExponential","times","plus","divide","eq","charAt","decimalPlaces","dp","w","dividedBy","div","dividedToIntegerBy","divToInt","equals","greaterThan","greaterThanOrEqualTo","gte","hyperbolicCosine","cosh","one","tinyPow","taylorSeries","cosh2_x","d8","minus","hyperbolicSine","sinh","sqrt","sinh2_x","d5","d16","d20","hyperbolicTangent","tanh","inverseCosine","acos","halfPi","isNeg","getPi","asin","inverseHyperbolicCosine","acosh","lte","ln","inverseHyperbolicSine","asinh","inverseHyperbolicTangent","atanh","wpr","xsd","inverseSine","atan","inverseTangent","px","x2","isInteger","isInt","isNaN","isNegative","isPositive","isPos","lessThan","lt","lessThanOrEqualTo","logarithm","base","isBase10","denominator","inf","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","sub","xe","xLTy","shift","getBase10Exponent","mod","q","naturalExponential","exp","negated","unshift","z","getPrecision","round","sine","sin","squareRoot","tangent","tan","mul","rL","toBinary","toStringBinary","toDecimalPlaces","toDP","checkInt32","finiteToString","toFixed","toFraction","maxD","d0","d1","d2","n0","n1","toHexadecimal","toHex","toNearest","toNumber","toOctal","toPower","yn","intPow","toPrecision","toSignificantDigits","toSD","truncated","trunc","valueOf","toJSON","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","aL","bL","subtract","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","ltgt","c0","numerator","x1","parseDecimal","search","substring","parseOther","divisor","isFloat","p","test","Decimal","sin2_x","isHyperbolic","u","pi","atan2","config","obj","useDefaults","defaults","ps","getRandomValues","randomBytes","clone","isDecimalInstance","prototype","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","hypot","log10","log2","random","hasOwnProperty","arguments","copy","for","WHITELISTED_ACCOUNTS","NearTrustIndex","accountIndexHistory","accountIndexHistoryTimestamp","accountIndexHistoryFailures","accountResult","testLogs","get_temp_logs","calculate_index","account_id","thirtyTgas","repeat","callCount","thisContract","promise","newPromise","internalCallback","accountScores","accountFunctions","mapKey","promiseObject","score","error","msg","timestamp","accountIndex"],"mappings":"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"}